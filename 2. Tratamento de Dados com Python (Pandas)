# src/data_processing/kpi_processor.py
import pandas as pd
import numpy as np
from datetime import datetime

class KPIProcessor:
    def __init__(self, df):
        self.df = df.copy()
        self.style_guide = {
            'color_primary': '#2A5CAA',
            'color_secondary': '#FF7F0E',
            'color_alert': '#D62728',
            'date_format': '%Y-%m-%d'
        }
    
    def calculate_growth_metrics(self):
        """Calcula métricas de crescimento mensal"""
        self.df = self.df.sort_values('mes')
        
        for col in ['receita', 'lucro', 'pedidos', 'clientes_ativos']:
            self.df[f'{col}_growth'] = self.df[col].pct_change() * 100
            
        return self
    
    def add_forecast(self, periods=3):
        """Adiciona projeção simples para os próximos períodos"""
        last_date = self.df['mes'].max()
        forecast_dates = pd.date_range(
            start=last_date + pd.DateOffset(months=1),
            periods=periods,
            freq='MS'
        )
        
        forecast = pd.DataFrame({'mes': forecast_dates})
        
        # Modelo simplificado de previsão (média móvel)
        for col in ['receita', 'pedidos']:
            last_values = self.df[col].tail(3).values
            forecast[col] = [np.mean(last_values) * (1 + 0.05*i) for i in range(1, periods+1)]
        
        forecast['is_forecast'] = True
        self.df['is_forecast'] = False
        
        self.df = pd.concat([self.df, forecast], ignore_index=True)
        
        return self
    
    def apply_business_rules(self):
        """Aplica regras de negócio e classificações"""
        # Classifica desempenho
        self.df['desempenho'] = np.where(
            self.df['receita_growth'] > 5, 'Acima da Expectativa',
            np.where(self.df['receita_growth'] < -2, 'Abaixo da Expectativa', 'Dentro da Expectativa')
        )
        
        # Calcula margem de lucro
        self.df['margem_lucro'] = (self.df['lucro'] / self.df['receita']) * 100
        
        return self
    
    def get_processed_data(self):
        """Retorna dados processados"""
        return self.df
    
    def save_to_csv(self, path):
        """Salva dados em CSV"""
        self.df.to_csv(path, index=False, date_format=self.style_guide['date_format'])

# Exemplo de uso
if __name__ == "__main__":
    raw_data = pd.read_csv('data/raw/kpi_data.csv', parse_dates=['mes'])
    processor = KPIProcessor(raw_data)
    processed_data = (
        processor
        .calculate_growth_metrics()
        .add_forecast()
        .apply_business_rules()
        .get_processed_data()
    )
    processor.save_to_csv('data/processed/kpi_processed.csv')
